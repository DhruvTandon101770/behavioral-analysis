{"ast":null,"code":"var _jsxFileName = \"/Users/piyush/Library/CloudStorage/OneDrive-UPES/Sem6/proj minor/behavioral-analysis/frontend/src/components/CaptchaTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport API_BASE_URL from \"../api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CaptchaTest() {\n  _s();\n  const navigate = useNavigate();\n  const [keyData, setKeyData] = useState([]);\n  const [mouseData, setMouseData] = useState([]);\n  const [sessionStartTime, setSessionStartTime] = useState(Date.now());\n  const [scrollSpeed, setScrollSpeed] = useState(0);\n  const [phrase, setPhrase] = useState(\"Type this phrase exactly!\");\n  const [inputText, setInputText] = useState(\"\");\n  const [learningPhase, setLearningPhase] = useState(true);\n  const [learningTimeLeft, setLearningTimeLeft] = useState(60);\n\n  // Start learning phase timer\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLearningTimeLeft(prev => {\n        if (prev <= 1) {\n          setLearningPhase(false);\n          clearInterval(timer);\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  useEffect(() => {\n    let lastMousePos = {\n      x: 0,\n      y: 0,\n      time: Date.now()\n    };\n    let lastScrollTime = Date.now();\n    const handleKeyDown = event => {\n      const now = Date.now();\n      setKeyData(prev => [...prev, {\n        key: event.key,\n        time: now - sessionStartTime\n      }]);\n    };\n    const handleMouseMove = event => {\n      const now = Date.now();\n      const timeDiff = now - lastMousePos.time;\n      const dx = event.clientX - lastMousePos.x;\n      const dy = event.clientY - lastMousePos.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const speed = timeDiff > 0 ? distance / timeDiff : 0;\n      const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n      setMouseData(prev => [...prev, {\n        speed,\n        angle,\n        distance,\n        time: now\n      }]);\n      lastMousePos = {\n        x: event.clientX,\n        y: event.clientY,\n        time: now\n      };\n    };\n    const handleScroll = () => {\n      const now = Date.now();\n      const timeDiff = now - lastScrollTime;\n      const speed = timeDiff > 0 ? window.scrollY / timeDiff : 0;\n      setScrollSpeed(speed);\n      lastScrollTime = now;\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n  const handleSubmit = async () => {\n    if (inputText !== phrase) {\n      alert(\"Please type the phrase correctly.\");\n      return;\n    }\n    const sessionTime = (Date.now() - sessionStartTime) / 1000; // Convert to seconds\n\n    const requestBody = {\n      username: localStorage.getItem(\"username\") || \"unknown_user\",\n      keystroke_data: keyData,\n      mouse_data: mouseData,\n      session_time: sessionTime,\n      scroll_speed: scrollSpeed\n    };\n    try {\n      const response = await fetch(`${API_BASE_URL}/captcha/verify`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to verify CAPTCHA\");\n      }\n      const data = await response.json();\n      if (data.anomaly) {\n        alert(\"Anomaly detected! Logging you out.\");\n        navigate(\"/logout\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Behavioral CAPTCHA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), learningPhase ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Learning Phase: \", learningTimeLeft, \" seconds remaining...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Type this phrase: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: phrase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(CaptchaTest, \"K0lChukwmO749663Ld0NIYlnVQs=\", false, function () {\n  return [useNavigate];\n});\n_c = CaptchaTest;\nexport default CaptchaTest;\nvar _c;\n$RefreshReg$(_c, \"CaptchaTest\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","API_BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","CaptchaTest","_s","navigate","keyData","setKeyData","mouseData","setMouseData","sessionStartTime","setSessionStartTime","Date","now","scrollSpeed","setScrollSpeed","phrase","setPhrase","inputText","setInputText","learningPhase","setLearningPhase","learningTimeLeft","setLearningTimeLeft","timer","setInterval","prev","clearInterval","lastMousePos","x","y","time","lastScrollTime","handleKeyDown","event","key","handleMouseMove","timeDiff","dx","clientX","dy","clientY","distance","Math","sqrt","speed","angle","atan2","PI","handleScroll","window","scrollY","addEventListener","removeEventListener","handleSubmit","alert","sessionTime","requestBody","username","localStorage","getItem","keystroke_data","mouse_data","session_time","scroll_speed","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","error","data","anomaly","message","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/piyush/Library/CloudStorage/OneDrive-UPES/Sem6/proj minor/behavioral-analysis/frontend/src/components/CaptchaTest.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport API_BASE_URL from \"../api\";\n\nfunction CaptchaTest() {\n  const navigate = useNavigate();\n  const [keyData, setKeyData] = useState([]);\n  const [mouseData, setMouseData] = useState([]);\n  const [sessionStartTime, setSessionStartTime] = useState(Date.now());\n  const [scrollSpeed, setScrollSpeed] = useState(0);\n  const [phrase, setPhrase] = useState(\"Type this phrase exactly!\");\n  const [inputText, setInputText] = useState(\"\");\n  const [learningPhase, setLearningPhase] = useState(true);\n  const [learningTimeLeft, setLearningTimeLeft] = useState(60);\n\n  // Start learning phase timer\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLearningTimeLeft((prev) => {\n        if (prev <= 1) {\n          setLearningPhase(false);\n          clearInterval(timer);\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    let lastMousePos = { x: 0, y: 0, time: Date.now() };\n    let lastScrollTime = Date.now();\n\n    const handleKeyDown = (event) => {\n      const now = Date.now();\n      setKeyData((prev) => [\n        ...prev,\n        { key: event.key, time: now - sessionStartTime },\n      ]);\n    };\n\n    const handleMouseMove = (event) => {\n      const now = Date.now();\n      const timeDiff = now - lastMousePos.time;\n      const dx = event.clientX - lastMousePos.x;\n      const dy = event.clientY - lastMousePos.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const speed = timeDiff > 0 ? distance / timeDiff : 0;\n      const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n\n      setMouseData((prev) => [...prev, { speed, angle, distance, time: now }]);\n      lastMousePos = { x: event.clientX, y: event.clientY, time: now };\n    };\n\n    const handleScroll = () => {\n      const now = Date.now();\n      const timeDiff = now - lastScrollTime;\n      const speed = timeDiff > 0 ? window.scrollY / timeDiff : 0;\n      setScrollSpeed(speed);\n      lastScrollTime = now;\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  const handleSubmit = async () => {\n    if (inputText !== phrase) {\n      alert(\"Please type the phrase correctly.\");\n      return;\n    }\n\n    const sessionTime = (Date.now() - sessionStartTime) / 1000; // Convert to seconds\n\n    const requestBody = {\n      username: localStorage.getItem(\"username\") || \"unknown_user\",\n      keystroke_data: keyData,\n      mouse_data: mouseData,\n      session_time: sessionTime,\n      scroll_speed: scrollSpeed,\n    };\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/captcha/verify`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to verify CAPTCHA\");\n      }\n\n      const data = await response.json();\n      if (data.anomaly) {\n        alert(\"Anomaly detected! Logging you out.\");\n        navigate(\"/logout\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Behavioral CAPTCHA</h2>\n      {learningPhase ? (\n        <p>Learning Phase: {learningTimeLeft} seconds remaining...</p>\n      ) : (\n        <>\n          <p>Type this phrase: <strong>{phrase}</strong></p>\n          <input type=\"text\" value={inputText} onChange={(e) => setInputText(e.target.value)} />\n          <button onClick={handleSubmit}>Submit</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default CaptchaTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}